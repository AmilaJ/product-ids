/*******************************************************************************
 * Copyright  (c) 2015-2016, WSO2.Telco Inc. (http://www.wso2telco.com) All Rights Reserved.
 * 
 * WSO2.Telco Inc. licences this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/<%

include("../wsUtil.jag");
var util = require("../../util/utility.jag");

var log = new Log();
var serverUrl = util.getServerUrl();
serverUrl = serverUrl + "/UserProfileMgtService";

var ws = require('ws');
var webService = new ws.WSRequest();

function getAllOpenIds(userName){
    var userNameWithoutDomain = userName;
    var domain = session.get("domainName");
    if(domain != null && domain === constants.SUPPER_TENANT_DOMAIN){
        userName = userName + "@" + domain;
    }

    return callWSReturnJSON(webService, serverUrl, "urn:getAllOpenIDs", new Array(userName));
}


function removeAssociateID(idpID, associatedID){

var req =       <mgt:removeAssociateID xmlns:mgt="http://mgt.profile.user.identity.carbon.wso2.org">
         <mgt:idpID></mgt:idpID>
         <mgt:associatedID></mgt:associatedID>
      </mgt:removeAssociateID>;
req.*::idpID.setChildren(idpID);
req.*::associatedID.setChildren(associatedID);

callWSInOnly(webService, serverUrl, "urn:removeAssociateID", req);
}

function associateID(idpID, associatedID){

var req =   <mgt:associateID xmlns:mgt="http://mgt.profile.user.identity.carbon.wso2.org">
         <mgt:idpID></mgt:idpID>
         <mgt:associatedID></mgt:associatedID>
      </mgt:associateID>;
req.*::idpID.setChildren(idpID);
req.*::associatedID.setChildren(associatedID);

log.debug(req);

callWSInOnly(webService, serverUrl, "urn:associateID", req);
}

function getAssociatedIDs(){
var userName = session.get("user");

var log = new Log();
    var userNameWithoutDomain = userName;
    var domain = session.get("domainName");
    if(domain != null && domain === constants.SUPPER_TENANT_DOMAIN){
        userName = userName + "@" + domain;
    }



var req = <mgt:getAssociatedIDs xmlns:mgt="http://mgt.profile.user.identity.carbon.wso2.org">
                           <mgt:userName></mgt:userName>
                        </mgt:getAssociatedIDs>;
req.*::userName.setChildren(userName);
return callWSReturnJSON(webService, serverUrl, "urn:getAssociatedIDs", null, req);

}

%>
