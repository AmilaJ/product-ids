/*******************************************************************************
 * Copyright  (c) 2015-2016, WSO2.Telco Inc. (http://www.wso2telco.com) All Rights Reserved.
 * 
 * WSO2.Telco Inc. licences this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/<%
response.addHeader("Access-Control-Allow-Origin", "*");
response.addHeader("Content-Type", "application/json");
include("/site/jagg/site.jag");
include("/util/constants.jag");
var SERVER_URL = getWebAppsUrl();
(function () {

	var ssoUser = session.get(LOGGED_IN_USER),
	user = ssoUser,
	layout;

	if (!user) {
		//response.sendError(401, 'Unauthorized');
		//return;
	}

	var matcher = new URIMatcher(request.getRequestURI());
	var ues = require('/modules/ues.js');

	if (matcher.match('/{context}/apis/ues/layout/{appName}') ||
	matcher.match('/{context}/apis/ues/layout/')) {

		var method = request.getMethod();
		var appName = matcher.elements().appName || matcher.elements().context;

		if (method == 'GET') {
			layout = ues.getDashboardLayout(appName, user);
			log.debug(session.get(UI_USER_PERMISSIONS));

			var path = "gadget.json";
			var file = new File(path);
			file.open("r");
			var json = "";

			json = file.readAll();
			file.close();
			var json2 = parse(json);

			 

			for (var i in json2.widgets) {
				var url = json2.widgets[i].url;
				url = SERVER_URL + url;
				json2.widgets[i].url = url;
				
				var permissions = json2.widgets[i].permissions;
				if(permissions != null){
					if(!isAuthorized(permissions)){
						json2.widgets[i].authorized = "false";
					}
				}
			}

			print(json2);
			//new Log().info(layout);

		} else if (method == 'POST') {
			layout = request.getParameter('layout');
			//new Log().info(layout);
			print(ues.setDashboardLayout(appName, user, layout));

		}
	} else {
		response.sendError(404, 'API Endpoint Not Found');
	}
})();

function isAuthorized(resource){
	var perms = session.get(UI_USER_PERMISSIONS);
	if(perms == null) {
		return false;
	}

	for each(var p in perms){
		if(resource.indexOf(p) > -1){
			return true;
		}
	}
	for each(var res in resource){
		for each(var p in perms){
			if(res.indexOf(p) > -1){
				return true;
			}
		}

	}

	return false;
}
%>
